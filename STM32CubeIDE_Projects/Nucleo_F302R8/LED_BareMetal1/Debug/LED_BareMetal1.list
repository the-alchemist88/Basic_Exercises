
LED_BareMetal1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000208  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000390  08000390  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000390  08000390  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000390  08000390  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000390  08000390  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000390  08000390  00010390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000394  08000394  00010394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000398  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  0800039c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800039c  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000f05  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000450  00000000  00000000  00020f39  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001b0  00000000  00000000  00021390  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000168  00000000  00000000  00021540  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001463  00000000  00000000  000216a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001b24  00000000  00000000  00022b0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00092ca0  00000000  00000000  0002462f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b72cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004e8  00000000  00000000  000b734c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000378 	.word	0x08000378

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000378 	.word	0x08000378

080001c8 <main>:
#define GPIOB_ODR_OFFSET  0x14ul

#define GPIOB_ODR_REG_ADDR (GPIOB_BASE_ADDR+GPIOB_ODR_OFFSET)


int main(void){
 80001c8:	b480      	push	{r7}
 80001ca:	b087      	sub	sp, #28
 80001cc:	af00      	add	r7, sp, #0

	bool LED_STATE=false;
 80001ce:	2300      	movs	r3, #0
 80001d0:	75fb      	strb	r3, [r7, #23]

	uint32_t *p1= (uint32_t*) RCC_AHB2_EN_ADDR;
 80001d2:	4b16      	ldr	r3, [pc, #88]	; (800022c <main+0x64>)
 80001d4:	60fb      	str	r3, [r7, #12]

	uint32_t *p2= (uint32_t*) GPIOB_MODER_REG_ADDR;
 80001d6:	4b16      	ldr	r3, [pc, #88]	; (8000230 <main+0x68>)
 80001d8:	60bb      	str	r3, [r7, #8]

	uint32_t *p3= (uint32_t*) GPIOB_ODR_REG_ADDR;
 80001da:	4b16      	ldr	r3, [pc, #88]	; (8000234 <main+0x6c>)
 80001dc:	607b      	str	r3, [r7, #4]


	*p1 |=(1<<18); //enable GPIOB clock bus (AHB)
 80001de:	68fb      	ldr	r3, [r7, #12]
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	601a      	str	r2, [r3, #0]
	*p2 |=(1<<26); //output mode for 13. pin of B port(mode register)
 80001ea:	68bb      	ldr	r3, [r7, #8]
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80001f2:	68bb      	ldr	r3, [r7, #8]
 80001f4:	601a      	str	r2, [r3, #0]

	while(1){
		*p3^=(1<<13);// PA13 pin output set to high
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f483 5200 	eor.w	r2, r3, #8192	; 0x2000
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	601a      	str	r2, [r3, #0]
		LED_STATE ^= true;
 8000202:	7dfb      	ldrb	r3, [r7, #23]
 8000204:	f083 0301 	eor.w	r3, r3, #1
 8000208:	b2db      	uxtb	r3, r3
 800020a:	2b00      	cmp	r3, #0
 800020c:	bf14      	ite	ne
 800020e:	2301      	movne	r3, #1
 8000210:	2300      	moveq	r3, #0
 8000212:	75fb      	strb	r3, [r7, #23]
		for(int i=0;i<1000000;i++){};
 8000214:	2300      	movs	r3, #0
 8000216:	613b      	str	r3, [r7, #16]
 8000218:	e002      	b.n	8000220 <main+0x58>
 800021a:	693b      	ldr	r3, [r7, #16]
 800021c:	3301      	adds	r3, #1
 800021e:	613b      	str	r3, [r7, #16]
 8000220:	693b      	ldr	r3, [r7, #16]
 8000222:	4a05      	ldr	r2, [pc, #20]	; (8000238 <main+0x70>)
 8000224:	4293      	cmp	r3, r2
 8000226:	ddf8      	ble.n	800021a <main+0x52>
		*p3^=(1<<13);// PA13 pin output set to high
 8000228:	e7e5      	b.n	80001f6 <main+0x2e>
 800022a:	bf00      	nop
 800022c:	40021014 	.word	0x40021014
 8000230:	48000400 	.word	0x48000400
 8000234:	48000414 	.word	0x48000414
 8000238:	000f423f 	.word	0x000f423f

0800023c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000240:	e7fe      	b.n	8000240 <NMI_Handler+0x4>

08000242 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000242:	b480      	push	{r7}
 8000244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000246:	e7fe      	b.n	8000246 <HardFault_Handler+0x4>

08000248 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800024c:	e7fe      	b.n	800024c <MemManage_Handler+0x4>

0800024e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800024e:	b480      	push	{r7}
 8000250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000252:	e7fe      	b.n	8000252 <BusFault_Handler+0x4>

08000254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000258:	e7fe      	b.n	8000258 <UsageFault_Handler+0x4>

0800025a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800025a:	b480      	push	{r7}
 800025c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800025e:	bf00      	nop
 8000260:	46bd      	mov	sp, r7
 8000262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000266:	4770      	bx	lr

08000268 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800026c:	bf00      	nop
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr

08000276 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000276:	b480      	push	{r7}
 8000278:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800027a:	bf00      	nop
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr

08000284 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000288:	f000 f83e 	bl	8000308 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800028c:	bf00      	nop
 800028e:	bd80      	pop	{r7, pc}

08000290 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000294:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <SystemInit+0x20>)
 8000296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800029a:	4a05      	ldr	r2, [pc, #20]	; (80002b0 <SystemInit+0x20>)
 800029c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002a4:	bf00      	nop
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	e000ed00 	.word	0xe000ed00

080002b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80002b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002ec <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b8:	480d      	ldr	r0, [pc, #52]	; (80002f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80002ba:	490e      	ldr	r1, [pc, #56]	; (80002f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002bc:	4a0e      	ldr	r2, [pc, #56]	; (80002f8 <LoopForever+0xe>)
  movs r3, #0
 80002be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002c0:	e002      	b.n	80002c8 <LoopCopyDataInit>

080002c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002c6:	3304      	adds	r3, #4

080002c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002cc:	d3f9      	bcc.n	80002c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ce:	4a0b      	ldr	r2, [pc, #44]	; (80002fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80002d0:	4c0b      	ldr	r4, [pc, #44]	; (8000300 <LoopForever+0x16>)
  movs r3, #0
 80002d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002d4:	e001      	b.n	80002da <LoopFillZerobss>

080002d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d8:	3204      	adds	r2, #4

080002da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002dc:	d3fb      	bcc.n	80002d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80002de:	f7ff ffd7 	bl	8000290 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002e2:	f000 f825 	bl	8000330 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80002e6:	f7ff ff6f 	bl	80001c8 <main>

080002ea <LoopForever>:

LoopForever:
    b LoopForever
 80002ea:	e7fe      	b.n	80002ea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80002ec:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80002f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80002f8:	08000398 	.word	0x08000398
  ldr r2, =_sbss
 80002fc:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000300:	20000024 	.word	0x20000024

08000304 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000304:	e7fe      	b.n	8000304 <ADC1_IRQHandler>
	...

08000308 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800030c:	4b06      	ldr	r3, [pc, #24]	; (8000328 <HAL_IncTick+0x20>)
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	461a      	mov	r2, r3
 8000312:	4b06      	ldr	r3, [pc, #24]	; (800032c <HAL_IncTick+0x24>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	4413      	add	r3, r2
 8000318:	4a04      	ldr	r2, [pc, #16]	; (800032c <HAL_IncTick+0x24>)
 800031a:	6013      	str	r3, [r2, #0]
}
 800031c:	bf00      	nop
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	20000000 	.word	0x20000000
 800032c:	20000020 	.word	0x20000020

08000330 <__libc_init_array>:
 8000330:	b570      	push	{r4, r5, r6, lr}
 8000332:	4e0d      	ldr	r6, [pc, #52]	; (8000368 <__libc_init_array+0x38>)
 8000334:	4c0d      	ldr	r4, [pc, #52]	; (800036c <__libc_init_array+0x3c>)
 8000336:	1ba4      	subs	r4, r4, r6
 8000338:	10a4      	asrs	r4, r4, #2
 800033a:	2500      	movs	r5, #0
 800033c:	42a5      	cmp	r5, r4
 800033e:	d109      	bne.n	8000354 <__libc_init_array+0x24>
 8000340:	4e0b      	ldr	r6, [pc, #44]	; (8000370 <__libc_init_array+0x40>)
 8000342:	4c0c      	ldr	r4, [pc, #48]	; (8000374 <__libc_init_array+0x44>)
 8000344:	f000 f818 	bl	8000378 <_init>
 8000348:	1ba4      	subs	r4, r4, r6
 800034a:	10a4      	asrs	r4, r4, #2
 800034c:	2500      	movs	r5, #0
 800034e:	42a5      	cmp	r5, r4
 8000350:	d105      	bne.n	800035e <__libc_init_array+0x2e>
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000358:	4798      	blx	r3
 800035a:	3501      	adds	r5, #1
 800035c:	e7ee      	b.n	800033c <__libc_init_array+0xc>
 800035e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000362:	4798      	blx	r3
 8000364:	3501      	adds	r5, #1
 8000366:	e7f2      	b.n	800034e <__libc_init_array+0x1e>
 8000368:	08000390 	.word	0x08000390
 800036c:	08000390 	.word	0x08000390
 8000370:	08000390 	.word	0x08000390
 8000374:	08000394 	.word	0x08000394

08000378 <_init>:
 8000378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037a:	bf00      	nop
 800037c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800037e:	bc08      	pop	{r3}
 8000380:	469e      	mov	lr, r3
 8000382:	4770      	bx	lr

08000384 <_fini>:
 8000384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000386:	bf00      	nop
 8000388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800038a:	bc08      	pop	{r3}
 800038c:	469e      	mov	lr, r3
 800038e:	4770      	bx	lr
