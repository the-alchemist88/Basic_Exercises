
LED_BareMetal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000200  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000388  08000388  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000388  08000388  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000388  08000388  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000388  08000388  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000388  08000388  00010388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800038c  0800038c  0001038c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000390  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000394  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000394  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001132  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000004d5  00000000  00000000  00021166  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001b0  00000000  00000000  00021640  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000168  00000000  00000000  000217f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018ccd  00000000  00000000  00021958  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001e4c  00000000  00000000  0003a625  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00092ba7  00000000  00000000  0003c471  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cf018  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004e8  00000000  00000000  000cf094  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000370 	.word	0x08000370

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000370 	.word	0x08000370

080001c8 <main>:
#define ODR_13_SET (1<<13) // PA13 output set to high (0b 0000 0000 0000 0000 0010 0000 0000 0000)

#define ODR_13_RESET (0<<13) //PA13 output set to low


int main(void){
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0

	RCC->AHBENR |= GPIOB_EN;
 80001ce:	4b16      	ldr	r3, [pc, #88]	; (8000228 <main+0x60>)
 80001d0:	695b      	ldr	r3, [r3, #20]
 80001d2:	4a15      	ldr	r2, [pc, #84]	; (8000228 <main+0x60>)
 80001d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80001d8:	6153      	str	r3, [r2, #20]
	GPIOB->MODER |= MODER_13_OUT;
 80001da:	4b14      	ldr	r3, [pc, #80]	; (800022c <main+0x64>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	4a13      	ldr	r2, [pc, #76]	; (800022c <main+0x64>)
 80001e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80001e4:	6013      	str	r3, [r2, #0]


	while(1){
		GPIOB->ODR |= ODR_13_SET;
 80001e6:	4b11      	ldr	r3, [pc, #68]	; (800022c <main+0x64>)
 80001e8:	695b      	ldr	r3, [r3, #20]
 80001ea:	4a10      	ldr	r2, [pc, #64]	; (800022c <main+0x64>)
 80001ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80001f0:	6153      	str	r3, [r2, #20]
		for(int i=0;i<100000;i++){}
 80001f2:	2300      	movs	r3, #0
 80001f4:	607b      	str	r3, [r7, #4]
 80001f6:	e002      	b.n	80001fe <main+0x36>
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	3301      	adds	r3, #1
 80001fc:	607b      	str	r3, [r7, #4]
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	4a0b      	ldr	r2, [pc, #44]	; (8000230 <main+0x68>)
 8000202:	4293      	cmp	r3, r2
 8000204:	ddf8      	ble.n	80001f8 <main+0x30>
		GPIOB->ODR &= ODR_13_RESET;
 8000206:	4b09      	ldr	r3, [pc, #36]	; (800022c <main+0x64>)
 8000208:	695b      	ldr	r3, [r3, #20]
 800020a:	4b08      	ldr	r3, [pc, #32]	; (800022c <main+0x64>)
 800020c:	2200      	movs	r2, #0
 800020e:	615a      	str	r2, [r3, #20]
		for(int i=0;i<100000;i++){}
 8000210:	2300      	movs	r3, #0
 8000212:	603b      	str	r3, [r7, #0]
 8000214:	e002      	b.n	800021c <main+0x54>
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	3301      	adds	r3, #1
 800021a:	603b      	str	r3, [r7, #0]
 800021c:	683b      	ldr	r3, [r7, #0]
 800021e:	4a04      	ldr	r2, [pc, #16]	; (8000230 <main+0x68>)
 8000220:	4293      	cmp	r3, r2
 8000222:	ddf8      	ble.n	8000216 <main+0x4e>
		GPIOB->ODR |= ODR_13_SET;
 8000224:	e7df      	b.n	80001e6 <main+0x1e>
 8000226:	bf00      	nop
 8000228:	40021000 	.word	0x40021000
 800022c:	48000400 	.word	0x48000400
 8000230:	0001869f 	.word	0x0001869f

08000234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000238:	e7fe      	b.n	8000238 <NMI_Handler+0x4>

0800023a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800023a:	b480      	push	{r7}
 800023c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800023e:	e7fe      	b.n	800023e <HardFault_Handler+0x4>

08000240 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000244:	e7fe      	b.n	8000244 <MemManage_Handler+0x4>

08000246 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000246:	b480      	push	{r7}
 8000248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800024a:	e7fe      	b.n	800024a <BusFault_Handler+0x4>

0800024c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000250:	e7fe      	b.n	8000250 <UsageFault_Handler+0x4>

08000252 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000252:	b480      	push	{r7}
 8000254:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000256:	bf00      	nop
 8000258:	46bd      	mov	sp, r7
 800025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025e:	4770      	bx	lr

08000260 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000260:	b480      	push	{r7}
 8000262:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000264:	bf00      	nop
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr

0800026e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800026e:	b480      	push	{r7}
 8000270:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000272:	bf00      	nop
 8000274:	46bd      	mov	sp, r7
 8000276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027a:	4770      	bx	lr

0800027c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000280:	f000 f83e 	bl	8000300 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000284:	bf00      	nop
 8000286:	bd80      	pop	{r7, pc}

08000288 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800028c:	4b06      	ldr	r3, [pc, #24]	; (80002a8 <SystemInit+0x20>)
 800028e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000292:	4a05      	ldr	r2, [pc, #20]	; (80002a8 <SystemInit+0x20>)
 8000294:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000298:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800029c:	bf00      	nop
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	e000ed00 	.word	0xe000ed00

080002ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80002ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002e4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b0:	480d      	ldr	r0, [pc, #52]	; (80002e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80002b2:	490e      	ldr	r1, [pc, #56]	; (80002ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b4:	4a0e      	ldr	r2, [pc, #56]	; (80002f0 <LoopForever+0xe>)
  movs r3, #0
 80002b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b8:	e002      	b.n	80002c0 <LoopCopyDataInit>

080002ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002be:	3304      	adds	r3, #4

080002c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c4:	d3f9      	bcc.n	80002ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002c6:	4a0b      	ldr	r2, [pc, #44]	; (80002f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c8:	4c0b      	ldr	r4, [pc, #44]	; (80002f8 <LoopForever+0x16>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002cc:	e001      	b.n	80002d2 <LoopFillZerobss>

080002ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d0:	3204      	adds	r2, #4

080002d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d4:	d3fb      	bcc.n	80002ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80002d6:	f7ff ffd7 	bl	8000288 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002da:	f000 f825 	bl	8000328 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80002de:	f7ff ff73 	bl	80001c8 <main>

080002e2 <LoopForever>:

LoopForever:
    b LoopForever
 80002e2:	e7fe      	b.n	80002e2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80002e4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80002e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002ec:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80002f0:	08000390 	.word	0x08000390
  ldr r2, =_sbss
 80002f4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80002f8:	20000024 	.word	0x20000024

080002fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80002fc:	e7fe      	b.n	80002fc <ADC1_IRQHandler>
	...

08000300 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000304:	4b06      	ldr	r3, [pc, #24]	; (8000320 <HAL_IncTick+0x20>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	461a      	mov	r2, r3
 800030a:	4b06      	ldr	r3, [pc, #24]	; (8000324 <HAL_IncTick+0x24>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4413      	add	r3, r2
 8000310:	4a04      	ldr	r2, [pc, #16]	; (8000324 <HAL_IncTick+0x24>)
 8000312:	6013      	str	r3, [r2, #0]
}
 8000314:	bf00      	nop
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	20000000 	.word	0x20000000
 8000324:	20000020 	.word	0x20000020

08000328 <__libc_init_array>:
 8000328:	b570      	push	{r4, r5, r6, lr}
 800032a:	4e0d      	ldr	r6, [pc, #52]	; (8000360 <__libc_init_array+0x38>)
 800032c:	4c0d      	ldr	r4, [pc, #52]	; (8000364 <__libc_init_array+0x3c>)
 800032e:	1ba4      	subs	r4, r4, r6
 8000330:	10a4      	asrs	r4, r4, #2
 8000332:	2500      	movs	r5, #0
 8000334:	42a5      	cmp	r5, r4
 8000336:	d109      	bne.n	800034c <__libc_init_array+0x24>
 8000338:	4e0b      	ldr	r6, [pc, #44]	; (8000368 <__libc_init_array+0x40>)
 800033a:	4c0c      	ldr	r4, [pc, #48]	; (800036c <__libc_init_array+0x44>)
 800033c:	f000 f818 	bl	8000370 <_init>
 8000340:	1ba4      	subs	r4, r4, r6
 8000342:	10a4      	asrs	r4, r4, #2
 8000344:	2500      	movs	r5, #0
 8000346:	42a5      	cmp	r5, r4
 8000348:	d105      	bne.n	8000356 <__libc_init_array+0x2e>
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000350:	4798      	blx	r3
 8000352:	3501      	adds	r5, #1
 8000354:	e7ee      	b.n	8000334 <__libc_init_array+0xc>
 8000356:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800035a:	4798      	blx	r3
 800035c:	3501      	adds	r5, #1
 800035e:	e7f2      	b.n	8000346 <__libc_init_array+0x1e>
 8000360:	08000388 	.word	0x08000388
 8000364:	08000388 	.word	0x08000388
 8000368:	08000388 	.word	0x08000388
 800036c:	0800038c 	.word	0x0800038c

08000370 <_init>:
 8000370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000372:	bf00      	nop
 8000374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000376:	bc08      	pop	{r3}
 8000378:	469e      	mov	lr, r3
 800037a:	4770      	bx	lr

0800037c <_fini>:
 800037c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037e:	bf00      	nop
 8000380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000382:	bc08      	pop	{r3}
 8000384:	469e      	mov	lr, r3
 8000386:	4770      	bx	lr
